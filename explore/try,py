#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient

from nav2_msgs.action import NavigateToPose
from geometry_msgs.msg import PoseStamped, Quaternion
from tf_transformations import quaternion_from_euler

import sys

class SingleBotNavigator(Node):
    def __init__(self):
        super().__init__('single_bot_navigator')

        # Parameters
        self.declare_parameter('robot_namespace', '')  # e.g., '/robot1'
        self.robot_namespace = self.get_parameter('robot_namespace').get_parameter_value().string_value

        # Action server name
        if self.robot_namespace:
            self.action_server_name = f'{self.robot_namespace}/navigate_to_pose'
        else:
            self.action_server_name = 'navigate_to_pose'
        
        self.get_logger().info(f'Using action server: {self.action_server_name}')

        # Initialize the Action Client
        self._action_client = ActionClient(self, NavigateToPose, self.action_server_name)

        # Wait for the action server to be available
        self.get_logger().info('Waiting for action server...')
        self._action_client.wait_for_server()
        self.get_logger().info('Action server available.')

    def send_goal(self, pose):
        goal_msg = NavigateToPose.Goal()
        goal_msg.pose = pose

        self.get_logger().info('Sending goal to navigate to the specified pose...')

        # Send the goal asynchronously
        self._send_goal_future = self._action_client.send_goal_async(goal_msg, feedback_callback=self.feedback_callback)
        self._send_goal_future.add_done_callback(self.goal_response_callback)

    def goal_response_callback(self, future):
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().error('Goal rejected by the action server.')
            rclpy.shutdown()
            return

        self.get_logger().info('Goal accepted by the action server.')

        # Get the result asynchronously
        self._get_result_future = goal_handle.get_result_async()
        self._get_result_future.add_done_callback(self.get_result_callback)

    def get_result_callback(self, future):
        result = future.result().result
        status = future.result().status

        if status == 4:
            self.get_logger().info('Goal reached successfully!')
        else:
            self.get_logger().error(f'Goal failed with status: {status}')

        # Shutdown the node after receiving the result
        rclpy.shutdown()

    def feedback_callback(self, feedback_msg):
        feedback = feedback_msg.feedback
        self.get_logger().info(f'Current Location: {feedback.current_pose.pose.position}')

def get_user_input():
    """
    Prompts the user to input target coordinates and orientation.

    Returns:
        PoseStamped: The target pose.
    """
    try:
        x = float(input("Enter target X coordinate: "))
        y = float(input("Enter target Y coordinate: "))
        theta = float(input("Enter target orientation (theta in degrees, default 0): ") or 0)
    except ValueError:
        print("Invalid input. Please enter numeric values.")
        sys.exit(1)

    # Convert theta from degrees to radians
    theta_rad = theta * (3.14159265 / 180.0)
    q = quaternion_from_euler(0, 0, theta_rad)

    # Construct PoseStamped message
    pose = PoseStamped()
    pose.header.frame_id = 'map'
    pose.header.stamp = rclpy.time.Time().to_msg()
    pose.pose.position.x = x
    pose.pose.position.y = y
    pose.pose.position.z = 0.0
    pose.pose.orientation = Quaternion(*q)  # Convert list to Quaternion

    return pose

def main(args=None):
    rclpy.init(args=args)

    navigator = SingleBotNavigator()

    pose = get_user_input()

    navigator.send_goal(pose)

    try:
        rclpy.spin(navigator)
    except KeyboardInterrupt:
        navigator.get_logger().info('Navigation interrupted by user.')
    finally:
        navigator.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()